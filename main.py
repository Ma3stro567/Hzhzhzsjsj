import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_TOKEN = '7839295746:AAGIaQJtwsS3qX-Cfx7Tp_MFaTDd-MgXkCQ'
ADMIN_USERNAME = '@Ma3stro274'
ADMIN_ID = 5083696616 # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π user_id –∞–¥–º–∏–Ω–∞
ADMIN_PASSWORD = '148852'

# === FSM ===
class AddOffer(StatesGroup):
    waiting_amount = State()
    waiting_price = State()

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

conn = sqlite3.connect("stars_bot.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    verified INTEGER DEFAULT 0,
    deals INTEGER DEFAULT 0,
    blacklist INTEGER DEFAULT 0
)""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS offers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    amount INTEGER,
    price_per_star INTEGER
)""")
conn.commit()

# === –£–¢–ò–õ–ò–¢–´ ===
def is_verified(user_id):
    cursor.execute("SELECT verified FROM users WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    return row and row[0] == 1

def get_commission(user_id):
    return 5 if is_verified(user_id) else 10

def get_offer_limit(user_id):
    return 4 if is_verified(user_id) else 2

# === –ö–ù–û–ü–ö–ò ===
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üõç –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="add_offer")],
        [InlineKeyboardButton(text="üóë –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="my_offers")],
        [InlineKeyboardButton(text="üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ])

# === –°–¢–ê–†–¢ ===
@dp.message(CommandStart())
async def start(message: types.Message):
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (message.from_user.id, message.from_user.username))
    conn.commit()
    await message.answer("üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –∑–≤—ë–∑–¥!", reply_markup=main_menu())

# === –ö–ù–û–ü–ö–ò ===
@dp.callback_query(F.data == "profile")
async def show_profile(call: types.CallbackQuery):
    user_id = call.from_user.id
    cursor.execute("SELECT verified, deals FROM users WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    verified = "üü¢" if row[0] else "‚ùå"
    deals = row[1]
    commission = get_commission(user_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìà –ö–∞–∫ —Å—Ç–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º?", callback_data="how_to_verify")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await call.message.edit_text(f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n–Æ–∑–µ—Ä: @{call.from_user.username}\n–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π: {verified}\n–°–¥–µ–ª–æ–∫: {deals}\n–ö–æ–º–∏—Å—Å–∏—è: {commission}%", reply_markup=kb)

@dp.callback_query(F.data == "how_to_verify")
async def how_to_verify(call: types.CallbackQuery):
    await call.message.edit_text("üü¢ –ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º, –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ 10 —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")]]))

@dp.callback_query(F.data == "shop")
async def show_shop(call: types.CallbackQuery):
    cursor.execute("""
        SELECT offers.id, users.username, offers.amount, offers.price_per_star, users.verified 
        FROM offers JOIN users ON offers.user_id = users.user_id
    """)
    offers = cursor.fetchall()
    if not offers:
        return await call.message.edit_text("üõç –ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç.", reply_markup=main_menu())

    buttons = []
    for offer_id, username, amount, price, verified in offers:
        label = f"{'üü¢ ' if verified else ''}@{username}: {amount}‚≠ê –ø–æ {price}‚ÇΩ"
        buttons.append([InlineKeyboardButton(text=label, url=f"https://t.me/{ADMIN_USERNAME[1:]}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    await call.message.edit_text("üõç –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.callback_query(F.data == "add_offer")
async def start_add_offer(call: types.CallbackQuery, state: FSMContext):
    cursor.execute("SELECT COUNT(*) FROM offers WHERE user_id=?", (call.from_user.id,))
    count = cursor.fetchone()[0]
    if count >= get_offer_limit(call.from_user.id):
        return await call.message.answer("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
    await call.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥:")
    await state.set_state(AddOffer.waiting_amount)

@dp.message(AddOffer.waiting_amount)
async def offer_amount(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    await state.update_data(amount=int(message.text))
    await message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ 1 –∑–≤–µ–∑–¥—É (‚ÇΩ):")
    await state.set_state(AddOffer.waiting_price)

@dp.message(AddOffer.waiting_price)
async def offer_price(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    data = await state.get_data()
    cursor.execute("INSERT INTO offers (user_id, amount, price_per_star) VALUES (?, ?, ?)",
                   (message.from_user.id, data['amount'], int(message.text)))
    conn.commit()
    await message.answer("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=main_menu())
    await state.clear()

@dp.callback_query(F.data == "my_offers")
async def my_offers(call: types.CallbackQuery):
    cursor.execute("SELECT id, amount, price_per_star FROM offers WHERE user_id=?", (call.from_user.id,))
    offers = cursor.fetchall()
    if not offers:
        return await call.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.", reply_markup=main_menu())
    kb = []
    for offer_id, amount, price in offers:
        kb.append([InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {amount}‚≠ê –ø–æ {price}‚ÇΩ", callback_data=f"del_{offer_id}")])
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    await call.message.edit_text("–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))

@dp.callback_query(F.data.startswith("del_"))
async def delete_offer(call: types.CallbackQuery):
    offer_id = int(call.data.split("_")[1])
    cursor.execute("DELETE FROM offers WHERE id=? AND user_id=?", (offer_id, call.from_user.id))
    conn.commit()
    await call.message.answer("‚úÖ –£–¥–∞–ª–µ–Ω–æ.", reply_markup=main_menu())

@dp.callback_query(F.data == "admin_panel")
async def admin_panel(call: types.CallbackQuery):
    if call.from_user.id != ADMIN_ID:
        return await call.message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")],
        [InlineKeyboardButton(text="‚úÖ –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º", callback_data="verify")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data="add_deal")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="ban")]
    ])
    await call.message.edit_text("üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=kb)

@dp.callback_query(F.data == "verify")
async def verify_user(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")

    @dp.message()
    async def set_verified(msg: types.Message):
        cursor.execute("UPDATE users SET verified=1 WHERE user_id=?", (int(msg.text),))
        conn.commit()
        await msg.answer("‚úÖ –°–¥–µ–ª–∞–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º.")

@dp.callback_query(F.data == "add_deal")
async def add_deal(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ user_id –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏:")

    @dp.message()
    async def add_one_deal(msg: types.Message):
        cursor.execute("UPDATE users SET deals = deals + 1 WHERE user_id=?", (int(msg.text),))
        conn.commit()
        await msg.answer("‚úÖ –°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

@dp.callback_query(F.data == "ban")
async def ban_user(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ user_id –¥–ª—è –±–∞–Ω–∞:")

    @dp.message()
    async def ban(msg: types.Message):
        cursor.execute("UPDATE users SET blacklist=1 WHERE user_id=?", (int(msg.text),))
        conn.commit()
        await msg.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

@dp.callback_query(F.data == "back")
async def go_back(call: types.CallbackQuery):
    await call.message.edit_text("üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# === –ó–ê–ü–£–°–ö ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
                       
