import telebot
from telebot import types

TOKEN = '7839295746:AAGIaQJtwsS3qX-Cfx7Tp_MFaTDd-MgXkCQ'
ADMIN_USERNAME = '@Ma3stro274'
ADMIN_ID = 5083696616  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π ID –∞–¥–º–∏–Ω–∞
ADMIN_PASSWORD = '148852'

bot = telebot.TeleBot(TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
users = {}
offers = []
blacklist = set()
verified = set()
deal_count = {}
commission_data = {}
MAX_OFFERS = {"verified": 4, "unverified": 2}

def is_verified(user_id):
    return user_id in verified

def get_commission(user_id):
    return 5 if is_verified(user_id) else 10

def can_post_offer(user_id):
    user_offers = [o for o in offers if o["seller_id"] == user_id]
    limit = MAX_OFFERS["verified" if is_verified(user_id) else "unverified"]
    return len(user_offers) < limit

@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    users[user_id] = message.from_user.username
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"))
    markup.add(types.InlineKeyboardButton("‚ûï –ü—Ä–æ–¥–∞—Ç—å –∑–≤—ë–∑–¥—ã", callback_data="sell"))
    markup.add(types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
    bot.send_message(user_id, "‚≠ê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –∑–≤—ë–∑–¥!", reply_markup=markup)

@bot.message_handler(commands=["adminpanel"])
def admin_panel(message):
    if str(message.text).endswith(ADMIN_PASSWORD):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì¨ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast"))
        markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="verify"))
        markup.add(types.InlineKeyboardButton("‚õî –ß–°", callback_data="blacklist"))
        bot.send_message(message.chat.id, "üéõ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id

    if user_id in blacklist:
        bot.answer_callback_query(call.id, "–í—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
        return

    if call.data == "shop":
        if not offers:
            bot.send_message(user_id, "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
            return
        for offer in offers:
            username = users.get(offer["seller_id"], "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            verified_mark = "üü¢" if offer["seller_id"] in verified else "üîò"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è", url=f"https://t.me/{ADMIN_USERNAME[1:]}"))
            bot.send_message(user_id, f"{verified_mark} @{username}\n"
                                      f"‚≠ê –ö–æ–ª-–≤–æ: {offer['count']}\n"
                                      f"üí∞ –¶–µ–Ω–∞ –∑–∞ –∑–≤–µ–∑–¥—É: {offer['price']}‚ÇΩ", reply_markup=markup)

    elif call.data == "sell":
        if not can_post_offer(user_id):
            bot.send_message(user_id, "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
            return
        msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥:")
        bot.register_next_step_handler(msg, process_star_count)

    elif call.data == "profile":
        username = users.get(user_id, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        verified_mark = "üü¢" if user_id in verified else "üîò"
        deals = deal_count.get(user_id, 0)
        comm = get_commission(user_id)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùì –ö–∞–∫ —Å—Ç–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º?", callback_data="how_verify"))
        bot.send_message(user_id, f"{verified_mark} @{username}\n"
                                  f"‚úÖ –°–¥–µ–ª–æ–∫: {deals}\n"
                                  f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {comm}%", reply_markup=markup)

    elif call.data == "how_verify":
        bot.send_message(user_id, "–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º, –Ω—É–∂–Ω–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ 10 —Å–¥–µ–ª–æ–∫ üíº")

    elif call.data == "broadcast":
        msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        bot.register_next_step_handler(msg, process_broadcast)

    elif call.data == "verify":
        msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        bot.register_next_step_handler(msg, lambda m: verify_user(m))

    elif call.data == "blacklist":
        msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ß–°:")
        bot.register_next_step_handler(msg, lambda m: blacklist_user(m))

def process_star_count(message):
    user_id = message.from_user.id
    try:
        count = int(message.text)
        msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –æ–¥–Ω—É –∑–≤–µ–∑–¥—É (–≤ ‚ÇΩ):")
        bot.register_next_step_handler(msg, lambda m: process_price(m, count))
    except:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def process_price(message, count):
    user_id = message.from_user.id
    try:
        price = float(message.text)
        offers.append({"seller_id": user_id, "count": count, "price": price})
        bot.send_message(user_id, "‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω!")
    except:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã.")

def process_broadcast(message):
    text = message.text
    for uid in users:
        try:
            bot.send_message(uid, f"üì¢ {text}")
        except:
            continue
    bot.send_message(message.chat.id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def verify_user(message):
    try:
        uid = int(message.text)
        verified.add(uid)
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–µ–Ω.")
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")

def blacklist_user(message):
    try:
        uid = int(message.text)
        blacklist.add(uid)
        bot.send_message(message.chat.id, f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°.")
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling()
