import telebot
from telebot import types

TOKEN = '7839295746:AAFTpDNE41nEsAJ4Lr8opnps6BVE4ZrItxg'
ADMIN_ID = 5083696616
ADMIN_USERNAME = '@Ma3stro274'
ADMIN_PANEL_PASSWORD = '148852'

bot = telebot.TeleBot(TOKEN)

users = {}
offers = []
blacklist = set()
admin_state = {}
edit_offer_state = {}
deal_add_state = {}
delete_offer_state = {}

def is_blacklisted(user_id):
    return user_id in blacklist

def user_offer_limit(user_id):
    verified = users.get(user_id, {}).get('verified', False)
    return 4 if verified else 2

def user_offer_count(user_id):
    return len([o for o in offers if o['user_id'] == user_id])

def get_commission(user_id):
    verified = users.get(user_id, {}).get('verified', False)
    return 5 if verified else 10

@bot.message_handler(commands=['start'])
def start(message):
    if is_blacklisted(message.from_user.id):
        return

    user_id = message.from_user.id
    username = message.from_user.username or f"id{user_id}"

    if user_id not in users:
        users[user_id] = {'username': username, 'verified': False, 'deal_count': 0}

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üõí –ú–∞–≥–∞–∑–∏–Ω', callback_data='shop'))
    markup.add(types.InlineKeyboardButton('üì§ –ü—Ä–æ–¥–∞—Ç—å –∑–≤–µ–∑–¥—ã', callback_data='sell'))
    markup.add(types.InlineKeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile'))

    bot.send_message(user_id, '‚≠ê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ma3stro shop!', reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data == 'sell')
def sell(callback):
    user_id = callback.from_user.id
    if is_blacklisted(user_id): return
    if user_offer_count(user_id) >= user_offer_limit(user_id):
        bot.answer_callback_query(callback.id, '‚ùå –õ–∏–º–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!')
        return
    msg = bot.send_message(user_id, 'üåü –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥:')
    bot.register_next_step_handler(msg, process_stars)

def process_stars(message):
    try:
        stars = int(message.text)
        if stars <= 0: raise ValueError
        msg = bot.send_message(message.chat.id, 'üí∏ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ 1 –∑–≤–µ–∑–¥—É (‚ÇΩ):')
        bot.register_next_step_handler(msg, lambda m: process_price(m, stars))
    except:
        bot.send_message(message.chat.id, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')

def process_price(message, stars):
    try:
        price = float(message.text)
        if price <= 0: raise ValueError
        user_id = message.from_user.id
        username = users[user_id]['username']
        offers.append({'user_id': user_id, 'username': username, 'stars': stars, 'price': price})
        bot.send_message(user_id, '‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω!')
    except:
        bot.send_message(message.chat.id, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.')

@bot.callback_query_handler(func=lambda c: c.data == 'shop')
def shop(callback):
    user_id = callback.from_user.id
    if is_blacklisted(user_id): return

    if not offers:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main'))
        bot.send_message(user_id, '‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.', reply_markup=markup)
        return

    for offer in offers:
        verified = users.get(offer['user_id'], {}).get('verified', False)
        status = 'üü¢' if verified else 'üîò'
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('üí¨ –ö—É–ø–∏—Ç—å (—á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∞)', url=f"https://t.me/{ADMIN_USERNAME[1:]}"))
        bot.send_message(user_id, f"{status} @{offer['username']} | {offer['stars']} –∑–≤—ë–∑–¥ –ø–æ {offer['price']}‚ÇΩ", reply_markup=markup)

    back_markup = types.InlineKeyboardMarkup()
    back_markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main'))
    bot.send_message(user_id, "\u200b", reply_markup=back_markup)

@bot.callback_query_handler(func=lambda c: c.data == 'profile')
def profile(callback):
    user_id = callback.from_user.id
    user = users[user_id]
    status = 'üü¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π' if user['verified'] else 'üîò –û–±—ã—á–Ω—ã–π'
    commission = get_commission(user_id)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚ùì –ö–∞–∫ —Å—Ç–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º?', callback_data='howto_verify'))
    user_offers = [o for o in offers if o['user_id'] == user_id]
    for i, offer in enumerate(user_offers):
        markup.add(types.InlineKeyboardButton(f'‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å {i+1}', callback_data=f'edit_{i}'))
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main'))

    bot.send_message(user_id,
                     f"üë§ @{user['username']}\nüíº –°–¥–µ–ª–æ–∫: {user['deal_count']}\nüí∏ –ö–æ–º–∏—Å—Å–∏—è: {commission}%\nüîñ –°—Ç–∞—Ç—É—Å: {status}",
                     reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data.startswith('edit_'))
def edit_offer(callback):
    user_id = callback.from_user.id
    index = int(callback.data.split('_')[1])
    user_offers = [o for o in offers if o['user_id'] == user_id]
    if index >= len(user_offers): return
    edit_offer_state[user_id] = user_offers[index]
    msg = bot.send_message(user_id, '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥:')
    bot.register_next_step_handler(msg, save_edited_offer)

def save_edited_offer(message):
    user_id = message.from_user.id
    try:
        new_stars = int(message.text)
        for offer in offers:
            if offer == edit_offer_state.get(user_id):
                offer['stars'] = new_stars
                bot.send_message(user_id, '‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ!')
    except:
        bot.send_message(user_id, '‚ùå –û—à–∏–±–∫–∞.')

@bot.callback_query_handler(func=lambda c: c.data == 'howto_verify')
def howto_verify(callback):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main'))
    bot.send_message(callback.from_user.id, '‚úÖ –ü—Ä–æ–≤–µ–¥–∏—Ç–µ 10 —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º!', reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data == 'back_to_main')
def back_to_main(callback):
    start(callback.message)

@bot.message_handler(commands=['adminpanel'])
def admin_panel(message):
    if str(message.text).endswith(ADMIN_PANEL_PASSWORD):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('üì¨ –†–∞—Å—Å—ã–ª–∫–∞', callback_data='broadcast'))
        markup.add(types.InlineKeyboardButton('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='verify'))
        markup.add(types.InlineKeyboardButton('‚õî –ß–°', callback_data='blacklist'))
        markup.add(types.InlineKeyboardButton('‚ûï –°–¥–µ–ª–∫–∞', callback_data='deal_add'))
        markup.add(types.InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', callback_data='del_offer'))
        bot.send_message(message.chat.id, 'üîê –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:', reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data == 'broadcast')
def broadcast(callback):
    msg = bot.send_message(callback.from_user.id, 'üì® –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:')
    bot.register_next_step_handler(msg, send_broadcast)

def send_broadcast(message):
    for uid in users:
        try:
            bot.send_message(uid, message.text)
        except:
            continue

@bot.callback_query_handler(func=lambda c: c.data == 'verify')
def ask_verify(callback):
    msg = bot.send_message(callback.from_user.id, 'üÜî –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:')
    bot.register_next_step_handler(msg, verify_user)

def verify_user(message):
    try:
        uid = int(message.text)
        if uid in users:
            users[uid]['verified'] = True
            bot.send_message(uid, 'üéâ –í—ã —Å—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!')
            bot.send_message(message.chat.id, '‚úÖ –£—Å–ø–µ—à–Ω–æ.')
    except:
        bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞.')

@bot.callback_query_handler(func=lambda c: c.data == 'blacklist')
def ask_blacklist(callback):
    msg = bot.send_message(callback.from_user.id, 'üÜî –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ß–°:')
    bot.register_next_step_handler(msg, add_to_blacklist)

def add_to_blacklist(message):
    try:
        uid = int(message.text)
        blacklist.add(uid)
        bot.send_message(uid, 'üö´ –í—ã –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ –ß–°.')
        bot.send_message(message.chat.id, '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°.')
    except:
        bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞.')

@bot.callback_query_handler(func=lambda c: c.data == 'deal_add')
def ask_deal_add(callback):
    msg = bot.send_message(callback.from_user.id, 'üÜî –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º—É –¥–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É:')
    bot.register_next_step_handler(msg, add_deal)

def add_deal(message):
    try:
        uid = int(message.text)
        users[uid]['deal_count'] += 1
        if users[uid]['deal_count'] >= 10 and not users[uid]['verified']:
            users[uid]['verified'] = True
            bot.send_message(uid, 'üéâ –í—ã —Å—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!')
        bot.send_message(message.chat.id, '‚úÖ –°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.')
    except:
        bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞.')

@bot.callback_query_handler(func=lambda c: c.data == 'del_offer')
def delete_offer(callback):
    for i, offer in enumerate(offers):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å', callback_data=f'del_{i}'))
        bot.send_message(callback.from_user.id, f"@{offer['username']} | {offer['stars']} ‚≠ê –ø–æ {offer['price']}‚ÇΩ", reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data.startswith('del_'))
def do_delete_offer(callback):
    index = int(callback.data.split('_')[1])
    if 0 <= index < len(offers):
        offers.pop(index)
        bot.send_message(callback.from_user.id, '‚úÖ –£–¥–∞–ª–µ–Ω–æ.')

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
bot.polling(none_stop=True)
