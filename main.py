import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, CallbackContext, 
    CallbackQueryHandler, MessageHandler, Filters
)
import sqlite3
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('star_market.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    is_verified BOOLEAN DEFAULT 0,
    deals_completed INTEGER DEFAULT 0,
    commission_rate REAL DEFAULT 10.0
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS offers (
    offer_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    stars INTEGER,
    price REAL,
    is_active BOOLEAN DEFAULT 1,
    FOREIGN KEY(user_id) REFERENCES users(user_id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS blacklist (
    user_id INTEGER PRIMARY KEY,
    FOREIGN KEY(user_id) REFERENCES users(user_id)
''')

conn.commit()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7839295746:AAGIaQJtwsS3qX-Cfx7Tp_MFaTDd-MgXkCQ"
ADMIN_USERNAME = "@Ma3stro274"
ADMIN_PASSWORD = "148852"
COMMISSION_REGULAR = 10.0
COMMISSION_VERIFIED = 5.0

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================
def get_user(user_id):
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    return cursor.fetchone()

def create_user(user_id, username):
    if not get_user(user_id):
        cursor.execute(
            'INSERT INTO users (user_id, username) VALUES (?, ?)',
            (user_id, username)
        )
        conn.commit()

def get_offers_count(user_id):
    cursor.execute(
        'SELECT COUNT(*) FROM offers WHERE user_id = ? AND is_active = 1',
        (user_id,)
    )
    return cursor.fetchone()[0]

def get_offer_limit(user_id):
    user = get_user(user_id)
    return 4 if user and user[2] else 2  # 2 –¥–ª—è –æ–±—ã—á–Ω—ã—Ö, 4 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö

# ===================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====================
def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    create_user(user.id, user.username)
    
    text = (
        f"üåü‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ä—ã–Ω–æ–∫ –∑–≤–µ–∑–¥\!* ‚ú®üåü\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã\! üí´\n\n"
        "üîπ *–ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã* \- —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ —Å–≤–æ—é —Ü–µ–Ω—É\n"
        "üîπ *–ü–æ–∫—É–ø–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã* \- –Ω–∞—Ö–æ–¥–∏—Ç–µ –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
        "üîπ *–°—Ç–∞–Ω—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ø—Ä–æ–¥–∞–≤—Ü–æ–º* \- —Å–Ω–∏–∑—å—Ç–µ –∫–æ–º–∏—Å—Å–∏—é –¥–æ 5\% ‚úÖ\n\n"
        "üëá *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/addoffer \- –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
        "/market \- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞–≥–∞–∑–∏–Ω\n"
        "/profile \- –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å"
    )
    
    update.message.reply_text(text, parse_mode='MarkdownV2')

def add_offer(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    cursor.execute('SELECT 1 FROM blacklist WHERE user_id = ?', (user_id,))
    if cursor.fetchone():
        update.message.reply_text("‚õî *–í—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!* ‚õî", parse_mode='MarkdownV2')
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    current_offers = get_offers_count(user_id)
    offer_limit = get_offer_limit(user_id)
    
    if current_offers >= offer_limit:
        update.message.reply_text(
            f"üö´ *–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!*\n"
            f"–í–∞—à –ª–∏–º–∏—Ç: *{offer_limit}* {'‚≠ê' if offer_limit == 2 else '‚≠ê‚≠ê‚≠ê‚≠ê'}\n"
            f"–£–¥–∞–ª–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
            parse_mode='MarkdownV2'
        )
        return
    
    # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    context.user_data['creating_offer'] = True
    update.message.reply_text(
        "‚ú® *–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!* ‚ú®\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥> <—Ü–µ–Ω–∞ –∑–∞ 1 –∑–≤–µ–∑–¥—É –≤ —Ä—É–±–ª—è—Ö>`\n\n"
        "*–ü—Ä–∏–º–µ—Ä:* `5 1000`\n"
        "\(5 –∑–≤–µ–∑–¥ –ø–æ 1000 —Ä—É–±\. –∫–∞–∂–¥–∞—è\)",
        parse_mode='MarkdownV2'
    )

def handle_offer_input(update: Update, context: CallbackContext) -> None:
    if not context.user_data.get('creating_offer'):
        return
    
    user_id = update.effective_user.id
    try:
        stars, price = map(float, update.message.text.split())
        stars = int(stars)
        
        if stars <= 0 or price <= 0:
            raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        current_offers = get_offers_count(user_id)
        offer_limit = get_offer_limit(user_id)
        
        if current_offers >= offer_limit:
            update.message.reply_text("‚ùó –õ–∏–º–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑–º–µ–Ω–∏–ª—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞!")
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
        cursor.execute(
            'INSERT INTO offers (user_id, stars, price) VALUES (?, ?, ?)',
            (user_id, stars, price)
        )
        conn.commit()
        
        # –†–∞—Å—á–µ—Ç —Å –∫–æ–º–∏—Å—Å–∏–µ–π
        user = get_user(user_id)
        commission = COMMISSION_VERIFIED if user[2] else COMMISSION_REGULAR
        total = stars * price
        after_commission = total * (1 - commission/100)
        
        update.message.reply_text(
            f"‚úÖ *–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!* ‚úÖ\n\n"
            f"‚≠ê *–ó–≤–µ–∑–¥:* {stars}\n"
            f"üí∞ *–¶–µ–Ω–∞ –∑–∞ –∑–≤–µ–∑–¥—É:* {price} —Ä—É–±\n"
            f"üíé *–ò—Ç–æ–≥–æ:* {total:.2f} —Ä—É–±\n"
            f"üìâ *–ö–æ–º–∏—Å—Å–∏—è ({commission}%):* {total * commission/100:.2f} —Ä—É–±\n"
            f"üí≥ *–í—ã –ø–æ–ª—É—á–∏—Ç–µ:* {after_commission:.2f} —Ä—É–±\n\n"
            f"–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –≤–∏–¥–Ω–æ –≤ /market",
            parse_mode='MarkdownV2'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        update.message.reply_text(
            "‚ùå *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!*\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ü–µ–Ω–∞>`\n"
            "*–ü—Ä–∏–º–µ—Ä:* `3 1500`",
            parse_mode='MarkdownV2'
        )
    
    context.user_data['creating_offer'] = False

def market(update: Update, context: CallbackContext) -> None:
    cursor.execute('''
        SELECT o.offer_id, o.stars, o.price, u.username, u.is_verified 
        FROM offers o
        JOIN users u ON o.user_id = u.user_id
        WHERE o.is_active = 1
    ''')
    offers = cursor.fetchall()
    
    if not offers:
        update.message.reply_text("üòî *–í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!*", parse_mode='MarkdownV2')
        return
    
    text = "üõí *–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ä—ã–Ω–æ–∫ –∑–≤–µ–∑–¥* ü™ê\n\n"
    for offer in offers:
        status = "‚úÖ" if offer[4] else "‚ùå"
        text += (
            f"{status} *–ü—Ä–æ–¥–∞–≤–µ—Ü:* @{offer[3]}\n"
            f"‚≠ê *–ó–≤–µ–∑–¥:* {offer[1]}\n"
            f"üí∞ *–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É:* {offer[2]} —Ä—É–±\n"
            f"üíé *–°—É–º–º–∞:* {offer[1] * offer[2]} —Ä—É–±\n"
            f"[–ö—É–ø–∏—Ç—å](https://t.me/{ADMIN_USERNAME[1:]}) | ID: `{offer[0]}`\n"
            "‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï\n"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("üîç –û–±–Ω–æ–≤–∏—Ç—å", callback_data='refresh_market')],
        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='my_profile')]
    ]
    
    update.message.reply_text(
        text, 
        parse_mode='MarkdownV2',
        reply_markup=InlineKeyboardMarkup(keyboard),
        disable_web_page_preview=True
    )

def profile(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    db_user = get_user(user.id)
    
    if not db_user:
        create_user(user.id, user.username)
        db_user = get_user(user.id)
    
    is_verified = db_user[2]
    deals = db_user[3]
    commission = db_user[4]
    offer_count = get_offers_count(user.id)
    offer_limit = get_offer_limit(user.id)
    
    status = "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π" if is_verified else "‚ùå –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π"
    status_emoji = "üü¢" if is_verified else "üî¥"
    
    text = (
        f"{status_emoji} *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
        f"üë§ *–Æ–∑–µ—Ä–Ω–µ–π–º:* @{user.username}\n"
        f"üìõ *–°—Ç–∞—Ç—É—Å:* {status}\n"
        f"üìä *–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏:* {deals}\n"
        f"üìâ *–ö–æ–º–∏—Å—Å–∏—è:* {commission}%\n"
        f"üì¶ *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:* {offer_count}/{offer_limit}\n\n"
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–ö–∞–∫ —Å—Ç–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º?"
    keyboard = [[
        InlineKeyboardButton("‚ùì –ö–∞–∫ —Å—Ç–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º?", callback_data='how_to_verify')
    ]]
    
    update.message.reply_text(
        text, 
        parse_mode='MarkdownV2',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ===================== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ =====================
def admin_panel(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    text = "üîê *–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:*"
    context.user_data['awaiting_password'] = True
    update.message.reply_text(text, parse_mode='MarkdownV2')

def handle_admin_password(update: Update, context: CallbackContext) -> None:
    if not context.user_data.get('awaiting_password'):
        return
        
    if update.message.text == ADMIN_PASSWORD:
        # –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='admin_broadcast')],
            [InlineKeyboardButton("‚õî –î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°", callback_data='admin_ban')],
            [InlineKeyboardButton("‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='admin_verify')],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')]
        ]
        
        update.message.reply_text(
            "üëë *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!* üëë\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='MarkdownV2',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        update.message.reply_text("‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!*", parse_mode='MarkdownV2')
        
    context.user_data['awaiting_password'] = False

# ===================== CALLBACK HANDLERS =====================
def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    if query.data == 'refresh_market':
        cursor.execute('''
            SELECT o.offer_id, o.stars, o.price, u.username, u.is_verified 
            FROM offers o
            JOIN users u ON o.user_id = u.user_id
            WHERE o.is_active = 1
        ''')
        offers = cursor.fetchall()
        
        if not offers:
            query.edit_message_text("üòî *–í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!*", parse_mode='MarkdownV2')
            return
        
        text = "üõí *–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ä—ã–Ω–æ–∫ –∑–≤–µ–∑–¥* ü™ê\n\n"
        for offer in offers:
            status = "‚úÖ" if offer[4] else "‚ùå"
            text += (
                f"{status} *–ü—Ä–æ–¥–∞–≤–µ—Ü:* @{offer[3]}\n"
                f"‚≠ê *–ó–≤–µ–∑–¥:* {offer[1]}\n"
                f"üí∞ *–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É:* {offer[2]} —Ä—É–±\n"
                f"üíé *–°—É–º–º–∞:* {offer[1] * offer[2]} —Ä—É–±\n"
                f"[–ö—É–ø–∏—Ç—å](https://t.me/{ADMIN_USERNAME[1:]}) | ID: `{offer[0]}`\n"
                "‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï\n"
            )
        
        keyboard = [
            [InlineKeyboardButton("üîç –û–±–Ω–æ–≤–∏—Ç—å", callback_data='refresh_market')],
            [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='my_profile')]
        ]
        
        query.edit_message_text(
            text, 
            parse_mode='MarkdownV2',
            reply_markup=InlineKeyboardMarkup(keyboard)),
            disable_web_page_preview=True
        )
    
    # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif query.data == 'my_profile':
        user = query.from_user
        db_user = get_user(user.id)
        is_verified = db_user[2]
        deals = db_user[3]
        commission = db_user[4]
        offer_count = get_offers_count(user.id)
        offer_limit = get_offer_limit(user.id)
        
        status = "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π" if is_verified else "‚ùå –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π"
        status_emoji = "üü¢" if is_verified else "üî¥"
        
        text = (
            f"{status_emoji} *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
            f"üë§ *–Æ–∑–µ—Ä–Ω–µ–π–º:* @{user.username}\n"
            f"üìõ *–°—Ç–∞—Ç—É—Å:* {status}\n"
            f"üìä *–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏:* {deals}\n"
            f"üìâ *–ö–æ–º–∏—Å—Å–∏—è:* {commission}%\n"
            f"üì¶ *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:* {offer_count}/{offer_limit}\n\n"
        )
        
        keyboard = [[
            InlineKeyboardButton("‚ùì –ö–∞–∫ —Å—Ç–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º?", callback_data='how_to_verify')
        ]]
        
        query.edit_message_text(
            text, 
            parse_mode='MarkdownV2',
            reply_markup=InlineKeyboardMarkup(keyboard))
    
    # –ö–∞–∫ —Å—Ç–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º
    elif query.data == 'how_to_verify':
        text = (
            "üåü *–ö–∞–∫ —Å—Ç–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ø—Ä–æ–¥–∞–≤—Ü–æ–º?* üåü\n\n"
            "1\. –ü—Ä–æ–π–¥–∏—Ç–µ *10 —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫*\n"
            "2\. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @Ma3stro274\n"
            "3\. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ —Å—Ç–∞—Ç—É—Å ‚úÖ\n\n"
            "*–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n"
            f"‚úÖ –°–Ω–∏–∂–µ–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è *{COMMISSION_VERIFIED}%* –≤–º–µ—Å—Ç–æ {COMMISSION_REGULAR}%\n"
            f"‚úÖ –õ–∏–º–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π *4‚≠ê* –≤–º–µ—Å—Ç–æ 2‚≠ê\n"
            "‚úÖ –ó–µ–ª–µ–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n\n"
            "üîÑ –ü–æ—Å–ª–µ 10 —Å–¥–µ–ª–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏—Ç –≤–∞—Å –≤—Ä—É—á–Ω—É—é"
        )
        keyboard = [[
            InlineKeyboardButton("üë§ –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data='my_profile'),
            InlineKeyboardButton("üõí –í –º–∞–≥–∞–∑–∏–Ω", callback_data='refresh_market')
        ]]
        query.edit_message_text(
            text, 
            parse_mode='MarkdownV2',
            reply_markup=InlineKeyboardMarkup(keyboard))
    
    # –ê–¥–º–∏–Ω: –†–∞—Å—Å—ã–ª–∫–∞
    elif query.data == 'admin_broadcast':
        context.user_data['admin_action'] = 'broadcast'
        query.message.reply_text("üì¢ *–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:*", parse_mode='MarkdownV2')
    
    # –ê–¥–º–∏–Ω: –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif query.data == 'admin_ban':
        context.user_data['admin_action'] = 'ban_user'
        query.message.reply_text(
            "‚õî *–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ß–°:*\n"
            "\(–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ /profile –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\)",
            parse_mode='MarkdownV2'
        )
    
    # –ê–¥–º–∏–Ω: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
    elif query.data == 'admin_verify':
        context.user_data['admin_action'] = 'verify_user'
        query.message.reply_text(
            "‚úÖ *–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:*\n"
            "\(–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ /profile –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\)",
            parse_mode='MarkdownV2'
        )
    
    # –ê–¥–º–∏–Ω: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    elif query.data == 'admin_stats':
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM offers WHERE is_active = 1")
        active_offers = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM blacklist")
        banned_users = cursor.fetchone()[0]
        
        text = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: *{total_users}*\n"
            f"üõí –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: *{active_offers}*\n"
            f"‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: *{banned_users}*"
        )
        query.message.reply_text(text, parse_mode='MarkdownV2')

# ===================== –ê–î–ú–ò–ù-–î–ï–ô–°–¢–í–ò–Ø =====================
def handle_admin_action(update: Update, context: CallbackContext) -> None:
    action = context.user_data.get('admin_action')
    if not action:
        return
    
    try:
        # –†–∞—Å—Å—ã–ª–∫–∞
        if action == 'broadcast':
            text = update.message.text
            
            cursor.execute("SELECT user_id FROM users")
            users = cursor.fetchall()
            
            for user in users:
                try:
                    context.bot.send_message(
                        chat_id=user[0],
                        text=text,
                        parse_mode='MarkdownV2'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            
            update.message.reply_text(f"‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!*", parse_mode='MarkdownV2')
        
        # –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif action == 'ban_user':
            user_id = int(update.message.text)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            if not get_user(user_id):
                update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ß–°
            cursor.execute("INSERT OR IGNORE INTO blacklist (user_id) VALUES (?)", (user_id,))
            
            # –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            cursor.execute("UPDATE offers SET is_active = 0 WHERE user_id = ?", (user_id,))
            conn.commit()
            
            update.message.reply_text(f"‚õî *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°!*", parse_mode='MarkdownV2')
        
        # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
        elif action == 'verify_user':
            user_id = int(update.message.text)
            
            user = get_user(user_id)
            if not user:
                update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
                
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –∫–æ–º–∏—Å—Å–∏–∏
            cursor.execute(
                "UPDATE users SET is_verified = 1, commission_rate = ? WHERE user_id = ?",
                (COMMISSION_VERIFIED, user_id)
            )
            conn.commit()
            
            update.message.reply_text(f"‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π!*", parse_mode='MarkdownV2')
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏—è: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã!")
    
    context.user_data['admin_action'] = None

# ===================== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====================
def main() -> None:
    updater = Updater(BOT_TOKEN)
    dp = updater.dispatcher

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("addoffer", add_offer))
    dp.add_handler(CommandHandler("market", market))
    dp.add_handler(CommandHandler("profile", profile))
    dp.add_handler(CommandHandler("adminpanel", admin_panel))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_offer_input))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_admin_password))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_admin_action))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    dp.add_handler(CallbackQueryHandler(button_handler))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
